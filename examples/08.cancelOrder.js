#!/usr/bin/env -S yarn node
/* eslint-disable no-unused-vars */

/*
DO NOT EDIT THIS FILE BY HAND!
Examples are generated using helpers/buildExamples.js script.
Check README.md for more details.
*/

const sw = require('@rhino.fi/starkware-crypto')
const getWeb3 = require('./helpers/getWeb3')

const RhinofiClientFactory = require('../src')
const envVars = require('./helpers/loadFromEnvOrConfig')(
  process.env.CONFIG_FILE_NAME
)
const logExampleResult = require('./helpers/logExampleResult')(__filename)

const ethPrivKey = envVars.ETH_PRIVATE_KEY
// NOTE: you can also generate a new key using:`
// const starkPrivKey = rhinofi.stark.createPrivateKey()
const starkPrivKey = envVars.STARK_PRIVATE_KEY
const rpcUrl = envVars.RPC_URL

const { web3, provider } = getWeb3(ethPrivKey, rpcUrl)

const rhinofiConfig = {
  api: envVars.API_URL,
  dataApi: envVars.DATA_API_URL,
  useAuthHeader: true,
  wallet: {
    type: 'tradingKey',
    meta: {
      starkPrivateKey: starkPrivKey
    }
  }
  // Add more variables to override default values
}

;(async () => {
  const rhinofi = await RhinofiClientFactory(web3, rhinofiConfig)

  const P = require('@rhino.fi/aigle')
  let order
  const orders = await rhinofi.getOrders()

  console.log('orders', orders)

  if (orders.length == 0) {
    console.log('submitting new order')

    // Submit an order to sell 0.1 ETH at a the price of 5000 USDT per ETH
    const symbol = 'ETH:USDT'
    const amount = -0.1
    const price = 5000
    const validFor = '0'
    const feeRate = ''

    order = await rhinofi.submitOrder({
      symbol,
      amount,
      price,
      starkPrivateKey: starkPrivKey,
      validFor,           // Optional
      feeRate,            // Optional
      gid: '1',           // Optional
      cid: 'mycid-cancel-example-' + Math.random().toString(36).substring(7), // Optional
      partnerId: 'P1'    // Optional
    })

    console.log('submitOrder response ->', order)

    while (true) {
      console.log('checking if order appears on the book...')
      if ((await rhinofi.getOrders()).find(o => o._id === order._id)) break
      await P.delay(1000)
    }
  }
  else {
    order = orders[0]
  }

  console.log('cancelling orderId', order._id)

  const response = await rhinofi.cancelOrder(order._id)
  // Alternative with cid :
  // const response = await rhinofi.cancelOrder({ cid: order.cid })

  logExampleResult(response)

})()
.catch(error => {
  console.error(error)
  process.exit(1)
})
